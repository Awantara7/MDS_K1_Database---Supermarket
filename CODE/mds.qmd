---
title: "Database -Supermarket"
format: html
editor: visual
---

# **Code Data Base Connection**

## Langkah 1: Instalasi dan Panggil Paket yang Diperlukan

```{r}
library(shiny)          # Untuk membuat aplikasi web interaktif di R  
library(shinythemes)    # Menyediakan tema untuk tampilan Shiny  
library(shinyWidgets)   # Widget tambahan untuk meningkatkan interaktivitas  
library(shinydashboard) # Membuat tampilan dashboard dalam Shiny  

library(DBI)            # Interface standar untuk koneksi ke database  
library(RMariaDB)       # Driver MySQL/MariaDB untuk koneksi database  
library(readr)          # Membaca file CSV dan format teks lainnya  
library(glue)           # Membantu dalam manipulasi string (khususnya SQL)  

library(dplyr)          # Untuk manipulasi data dengan sintaks yang sederhana  
library(dbplyr)         # Menggunakan dplyr langsung pada database SQL  

library(ggplot2)        # Membuat grafik statis  
library(plotly)         # Membuat grafik interaktif berbasis ggplot2  

library(DT)             # Membuat tabel interaktif di Shiny  
library(leaflet)        # Membuat peta interaktif  

library(ggmap)          # Menampilkan peta berbasis Google Maps  
library(tidygeocoder)   # Mengubah lokasi menjadi koordinat latitude dan longitude  
```

## Langkah 2: Koneksi ke MySQL & Membuat Database

```{r}
# Konfigurasi koneksi ke MySQL
db_config <- list(
  host = "127.0.0.1",  
  port = 3307,         # Sesuaikan dengan port MySQL di DBngin
  user = "root",
  password = "",
  dbname = "data csv"
)

# Buat koneksi tanpa database terlebih dahulu
con <- dbConnect(MariaDB(),
                 host = db_config$host,
                 port = db_config$port,
                 user = db_config$user,
                 password = "")

# Buat database jika belum ada
dbExecute(con, glue("CREATE DATABASE IF NOT EXISTS `{db_config$dbname}`"))
dbExecute(con, glue("USE `{db_config$dbname}`"))

# Tutup koneksi sementara
dbDisconnect(con)
```

## Langkah 3: Buat Tabel di MySQL

```{r}
# Buka koneksi dengan database yang telah dibuat
con <- dbConnect(MariaDB(),
                 host = db_config$host,
                 port = db_config$port,
                 user = db_config$user,
                 password = "",
                 dbname = db_config$dbname)

# 1. Tabel Cabang
dbExecute(con, "
    CREATE TABLE IF NOT EXISTS cabang (
        ID_Cabang VARCHAR(10) PRIMARY KEY,
        ID_Produk VARCHAR(10),
        Kota VARCHAR(50)
    )
")

# 2. Tabel Produk
dbExecute(con, "
    CREATE TABLE IF NOT EXISTS produk (
        ID_Produk VARCHAR(10) PRIMARY KEY,
        Kategori_Produk VARCHAR(50),
        Harga_Satuan DECIMAL(10,2),
        Kuantitas INT,
        Total_Harga DECIMAL(10,2),
        ID_Cabang VARCHAR(10),
        FOREIGN KEY (ID_Cabang) REFERENCES cabang(ID_Cabang) ON DELETE CASCADE
    )
")

# 3. Tabel Pelanggan
dbExecute(con, "
    CREATE TABLE IF NOT EXISTS pelanggan (
        ID_Pelanggan VARCHAR(10) PRIMARY KEY,
        Tipe_Pelanggan ENUM('Member', 'Normal'),
        Jenis_Kelamin ENUM('Laki-laki', 'Perempuan')
    )
")

# 4. Tabel Invoice
dbExecute(con, "
    CREATE TABLE IF NOT EXISTS invoice (
        ID_Invoice VARCHAR(20) PRIMARY KEY,
        ID_Produk VARCHAR(10),
        ID_Cabang VARCHAR(10),
        ID_Pelanggan VARCHAR(10),
        Total DECIMAL(10,2),
        Tanggal DATE,
        Waktu TIME,
        Pembayaran ENUM('Ewallet', 'Cash', 'Credit card'),
        Penilaian DECIMAL(3,1),  -- Memperbesar kapasitas dari 2,1 ke 3,1
        FOREIGN KEY (ID_Produk) REFERENCES produk(ID_Produk) ON DELETE CASCADE,
        FOREIGN KEY (ID_Cabang) REFERENCES cabang(ID_Cabang) ON DELETE CASCADE,
        FOREIGN KEY (ID_Pelanggan) REFERENCES pelanggan(ID_Pelanggan) ON DELETE CASCADE
    )
")

# Konfirmasi jika semua tabel sudah dibuat
dbListTables(con)
```

## Langkah 4: Membaca dan Memasukkan Data CSV ke MySQL

```{r}
# 1. Baca dan Masukkan Data Cabang
data_cabang <- read_delim("https://raw.githubusercontent.com/Awantara7/MDS_K1_Database---Supermarket/refs/heads/main/data/Cabang.csv", delim = ";")
dbWriteTable(con, "cabang", data_cabang, append = TRUE, row.names = FALSE)

# 2. Baca dan Masukkan Data Produk
data_produk <- read_delim("https://raw.githubusercontent.com/Awantara7/MDS_K1_Database---Supermarket/refs/heads/main/data/Produk.csv", delim = ";")

# Perbaiki format angka dengan menghapus titik pemisah ribuan
data_produk <- data_produk %>%
  mutate(
    Total_Harga = as.numeric(gsub("\\.", "", Total_Harga))
  )

dbWriteTable(con, "produk", data_produk, append = TRUE, row.names = FALSE)

# 3. Baca dan Masukkan Data Pelanggan
data_pelanggan <- read_delim("https://raw.githubusercontent.com/Awantara7/MDS_K1_Database---Supermarket/refs/heads/main/data/Pelanggan.csv", delim = ";")
dbWriteTable(con, "pelanggan", data_pelanggan, append = TRUE, row.names = FALSE)

# 4. Baca dan Masukkan Data Invoice
data_invoice <- read_delim("https://raw.githubusercontent.com/Awantara7/MDS_K1_Database---Supermarket/refs/heads/main/data/Invoice.csv", delim = ";")

# Perbaiki format angka dengan menghapus titik pemisah ribuan
data_invoice <- data_invoice %>%
  mutate(
    Total = as.numeric(gsub("\\.", "", Total))
  )

# Konversi tanggal ke format yang sesuai
data_invoice <- data_invoice %>%
  mutate(Tanggal = as.Date(Tanggal, format = "%m/%d/%Y"))

dbWriteTable(con, "invoice", data_invoice, append = TRUE, row.names = FALSE)
```

## Langkah 5: Verifikasi Data dalam Database

```{r}
# Cek apakah tabel tersedia di database
dbListTables(con)
```

```{r}
# Cek struktur tabel setelah perubahan
dbGetQuery(con, "DESCRIBE cabang")
dbGetQuery(con, "DESCRIBE produk")
dbGetQuery(con, "DESCRIBE pelanggan")
dbGetQuery(con, "DESCRIBE invoice")
dbGetQuery(con, "DESCRIBE cabang.csv")
```

```{r}
# Cek contoh data dari setiap tabel
dbGetQuery(con, "SELECT * FROM cabang LIMIT 5")
dbGetQuery(con, "SELECT * FROM produk LIMIT 5")
dbGetQuery(con, "SELECT * FROM pelanggan LIMIT 5")
dbGetQuery(con, "SELECT * FROM invoice LIMIT 5")
```

```{r}
# Load tabel dari database
tbl_cabang <- tbl(con, "Cabang")
tbl_invoice <- tbl(con, "Invoice")
tbl_pelanggan <- tbl(con, "Pelanggan")
tbl_produk <- tbl(con, "Produk")
```

```{r}
print(tbl_cabang)
print(tbl_invoice)
print(tbl_pelanggan)
print(tbl_produk)
```

# Code Preprocessing Data

```{r}
library(dplyr)

fix_data <- function(data) {
  data %>%
    mutate(
      computed_total = Harga_Satuan * Kuantitas  # perkalian antara harga satuan dan kuantitas
    )
}
```

```{r}
data_error <- function(data) {
  data %>%
    mutate(
      computed_total = Harga_Satuan * Kuantitas
    ) %>%
    filter( abs(computed_total - Total_Harga) > 1 )  # Misalnya, jika selisih lebih dari 1, dianggap tidak konsisten.
}
```

# Code Dashboard RShiny

```{r}
library(shiny)
library(bs4Dash)
library(shinymanager)
library(shinyWidgets)
library(highcharter)
library(echarts4r)
library(DT)
library(leaflet)
library(dplyr)
library(DBI)
library(RMariaDB)
library(glue)
library(shinyjs)

# Fungsi konversi nilai Total (jika data masih berupa karakter)
convert_total <- function(x) {
  as.numeric(gsub("[^0-9.-]", "", x))
}

# Data kredensial (tambah akun wawan)
credentials <- data.frame(
  user = c("admin", "user1", "wawan"),
  password = c("admin123", "user123", "wawan"),
  stringsAsFactors = FALSE
)

# Tema warna
theme_colors <- list(
  primary = "#005BAC",
  secondary = "#FF6F00",
  accent = "#F5F5F5",
  bg_light = "#FFFFFF",
  text_dark = "#333333"
)

# UI -------------------------------------------------------------------------
ui <- bs4DashPage(
  title = "WA-ONE SWALAYAN",
  header = bs4DashNavbar(
    skin = "light",
    status = "white",
    brand = bs4DashBrand(
      title = "WA-ONE SWALAYAN",
      color = "primary",
      href = "#"
    ),
    compact = FALSE
  ),
  sidebar = bs4DashSidebar(
    skin = "light",
    status = "primary",
    title = "Menu",
    brandColor = "primary",
    collapsed = FALSE,
    bs4SidebarMenu(
      bs4SidebarMenuItem("Dashboard Penjualan", tabName = "penjualan", icon = icon("chart-line")),
      bs4SidebarMenuItem("Produk & Kategori", tabName = "produk", icon = icon("box")),
      bs4SidebarMenuItem("Segmentasi Pelanggan", tabName = "pelanggan", icon = icon("users")),
      bs4SidebarMenuItem("Performa Cabang", tabName = "cabang", icon = icon("store")),
      bs4SidebarMenuItem("Data Quality", tabName = "dataquality", icon = icon("exclamation-triangle")),
      bs4SidebarMenuItem("Pengaturan", tabName = "settings", icon = icon("cogs"))
    )
  ),
  body = bs4DashBody(
    useShinyjs(),
    tags$head(
      tags$link(rel = "stylesheet", href = "https://fonts.googleapis.com/css?family=Roboto&display=swap"),
      tags$style(HTML("
        body {font-family: 'Roboto', sans-serif;}
        .main-header {background-color: #005BAC;}
        .main-sidebar {background-color: #FFFFFF;}
      "))
    ),
    bs4TabItems(
      # Tab: Dashboard Penjualan
      bs4TabItem(
        tabName = "penjualan",
        fluidRow(
          bs4ValueBoxOutput("total_penjualan", width = 3),
          bs4ValueBoxOutput("performacabang", width = 3),
          bs4ValueBoxOutput("produk_terjual", width = 3),
          bs4ValueBoxOutput("total_transaksi", width = 3)
        ),
        # Grafik total penjualan per waktu dikelompokkan per kategori
        fluidRow(
          bs4Card(
            title = "Total Penjualan per Waktu per Kategori", width = 12,
            highchartOutput("plot_penjualan", height = "400px")
          )
        ),
        fluidRow(
          bs4Card(
            title = "Produk Terlaris", width = 12,
            echarts4rOutput("plot_produk_terlaris", height = "400px")
          )
        ),
        fluidRow(
          bs4Card(
            title = "Peta Penjualan per Kota", width = 12,
            leafletOutput("peta_penjualan", height = "400px")
          )
        ),
        fluidRow(
          bs4Card(
            title = "Data Transaksi", width = 12,
            DTOutput("table_transaksi")
          )
        )
      ),
      # Tab: Produk & Kategori
      bs4TabItem(
        tabName = "produk",
        fluidRow(
          bs4Card(
            title = "Distribusi Penjualan per Kategori", width = 6,
            echarts4rOutput("pie_kategori", height = "400px")
          ),
          bs4Card(
            title = "Perbandingan Penjualan Antar Produk", width = 6,
            echarts4rOutput("bar_produk", height = "400px")
          )
        ),
        fluidRow(
          bs4Card(
            title = "Tren Penjualan Produk", width = 12,
            highchartOutput("tren_produk", height = "400px")
          )
        )
      ),
      # Tab: Segmentasi Pelanggan
      bs4TabItem(
        tabName = "pelanggan",
        fluidRow(
          bs4Card(
            title = "Demografi Pelanggan", width = 6,
            echarts4rOutput("plot_demografi", height = "400px")
          ),
          bs4Card(
            title = "Frekuensi Belanja", width = 6,
            highchartOutput("plot_frekuensi_belanja", height = "400px")
          )
        ),
        fluidRow(
          bs4Card(
            title = "RFM Analysis", width = 12,
            highchartOutput("rfm_analysis", height = "400px")
          )
        )
      ),
      # Tab: Performa Cabang
      bs4TabItem(
        tabName = "cabang",
        fluidRow(
          bs4Card(
            title = "Perbandingan Omzet Tiap Cabang", width = 6,
            echarts4rOutput("plot_omzet_cabang", height = "400px")
          ),
          bs4Card(
            title = "Cabang Terbaik & Terburuk", width = 6,
            echarts4rOutput("plot_cabang_performa", height = "400px")
          )
        ),
        fluidRow(
          bs4Card(
            title = "Distribusi Cabang", width = 12,
            leafletOutput("map_cabang", height = "400px")
          )
        )
      ),
      # Tab: Data Quality
      bs4TabItem(
        tabName = "dataquality",
        fluidRow(
          bs4Card(
            title = "Data Lengkap", width = 12,
            DTOutput("table_full")
          )
        ),
        fluidRow(
          bs4Card(
            title = "Data Inconsistency", width = 12,
            DTOutput("table_error")
          )
        )
      ),
      # Tab: Pengaturan
      bs4TabItem(
        tabName = "settings",
        h2("Pengaturan Aplikasi"),
        fluidRow(
          bs4Card(
            title = "Ubah Password", width = 6,
            passwordInput("old_password", "Password Lama"),
            passwordInput("new_password", "Password Baru"),
            actionButton("update_password", "Update Password", class = "btn btn-primary")
          ),
          bs4Card(
            title = "Preferensi", width = 6,
            checkboxInput("dark_mode", "Mode Gelap"),
            checkboxInput("notif_email", "Terima Notifikasi via Email"),
            actionButton("save_preferences", "Simpan Preferensi", class = "btn btn-success")
          )
        )
      )
    )
  ),
  
  controlbar = bs4DashControlbar(
    skin = "light",
    title = "Filter Data",
    collapsed = TRUE,
    dateRangeInput("dateRange", "Pilih Rentang Waktu", 
                   start = Sys.Date() - 30, end = Sys.Date(),
                   format = "yyyy-mm-dd", separator = " hingga ",
                   startview = "year", language = "id"),
    pickerInput("select_produk", "Pilih Produk:", choices = NULL, multiple = TRUE),
    actionButton("apply_filters", "Terapkan Filter")
  ),
  
  footer = bs4DashFooter(
    left = "WA-ONE SWALAYAN © 2023",
    right = "Powered by R & Shiny"
  )
)

# ==============================================================================
# Server Function
# ==============================================================================

server <- function(input, output, session) {
  
  res_auth <- secure_server(check_credentials = check_credentials(credentials))
  
  con <- dbConnect(
    RMariaDB::MariaDB(),
    dbname = "data csv",  
    host = "127.0.0.1",    
    port = 3307,
    user = "root",
    password = ""
  )
  
  tbl_cabang    <- tbl(con, "Cabang")
  tbl_invoice   <- tbl(con, "Invoice")
  tbl_pelanggan <- tbl(con, "Pelanggan")
  tbl_produk    <- tbl(con, "Produk")
  
  city_coords <- data.frame(
    Kota = c("Yangon", "Naypyitaw","Mandalay"), 
    lat  = c(16.8661, 19.7633, 21.9602),  
    lon  = c(96.1951, 96.0810, 96.1012),
    stringsAsFactors = FALSE
  )
  
  observe({
    produk_list <- tbl_produk %>% 
      select(Kategori_Produk) %>% 
      collect() %>% 
      pull() %>% 
      unique()
    updatePickerInput(session, "select_produk", choices = produk_list)
  })
  
  load_data <- reactive({
    if (is.null(input$select_year) || input$select_year == "") {
      invoice_data <- tbl_invoice %>% collect()
    } else {
      selected_year <- as.numeric(input$select_year)
      start_date <- as.Date(paste0(selected_year, "-01-01"))
      end_date   <- as.Date(paste0(selected_year, "-12-31"))
      
      invoice_data <- tbl_invoice %>%
        filter(
          as.Date(Tanggal) >= start_date,
          as.Date(Tanggal) <= end_date
        ) %>% collect()
    }
    
    cat("Invoice data: ", nrow(invoice_data), "\n")
    
    invoice_data <- invoice_data %>% 
      select(ID_Invoice, ID_Produk, ID_Cabang, ID_Pelanggan, Total, Tanggal, Waktu, Pembayaran, Penilaian)
    
    data_joined <- invoice_data %>%
      left_join(tbl_pelanggan %>% collect(), by = "ID_Pelanggan") %>%
      left_join(tbl_produk %>% select(-ID_Cabang) %>% collect(), by = "ID_Produk") %>%
      left_join(tbl_cabang %>% collect(), by = "ID_Cabang")
    
    cat("Data joined: ", nrow(data_joined), "\n")
    
    if (!is.null(input$select_produk) && length(input$select_produk) > 0) {
      data_joined <- data_joined %>% filter(Kategori_Produk %in% input$select_produk)
    }
    
    cat("Data filtered: ", nrow(data_joined), "\n")
    data_joined
  })
  
  fix_data <- reactive({
    data <- load_data()
    data %>% mutate(
      computed_total = Harga_Satuan * Kuantitas  # asumsi kolom Harga_Satuan dan Kuantitas numerik
    )
  })
  
  data_error <- reactive({
    data <- fix_data()
    data %>% filter( abs(computed_total - Total_Harga) > 1 )
  })
  
  output$table_full <- renderDT({
    data <- fix_data()
    datatable(data, options = list(pageLength = 10, scrollX = TRUE))
  })
  
  output$table_error <- renderDT({
    data <- data_error()
    datatable(data, options = list(pageLength = 10, scrollX = TRUE))
  })
  
  output$total_penjualan <- renderbs4ValueBox({
    data <- load_data()
    
    if (nrow(data) == 0) {
        return(bs4ValueBox(
            value = "Rp 0",
            subtitle = "Total Penjualan",
            color = "primary",
            icon = icon("credit-card")
        ))
    }
    
    total_penjualan <- sum(as.numeric(Total), na.rm = TRUE)
    
    bs4ValueBox(
        value = paste0("Rp ", formatC(total_penjualan, format = "d", big.mark = ",")),
        subtitle = "Total Penjualan",
        color = "primary",
        icon = icon("credit-card")
    )
})

   
  
  output$performacabang <- renderbs4ValueBox({
    data <- load_data()
    if (nrow(data) == 0) {
      return(bs4ValueBox(
        value = "-",
        subtitle = "Cabang Terbaik",
        color = "success",
        icon = icon("store")
      ))
    }
    cabang_performance <- data %>%
      group_by(ID_Cabang) %>%
      summarise(Total_Cabang = sum(as.numeric(Total), na.rm = TRUE), .groups = "drop") %>%
      arrange(desc(Total_Cabang)) %>%
      slice(1)
    bs4ValueBox(
      value = cabang_performance$ID_Cabang,
      subtitle = "Cabang Terbaik",
      color = "success",
      icon = icon("store")
    )
  })
  
  output$produk_terjual <- renderbs4ValueBox({
    data <- load_data()
    if (nrow(data) == 0) {
      return(bs4ValueBox(
        value = "0",
        subtitle = "Produk Terjual",
        color = "warning",
        icon = icon("shopping-cart")
      ))
    }
    total_produk_terjual <- sum(data$Kuantitas, na.rm = TRUE)
    bs4ValueBox(
      value = formatC(total_produk_terjual, format = "d", big.mark = ","),
      subtitle = "Produk Terjual",
      color = "warning",
      icon = icon("shopping-cart")
    )
  })
  
  output$total_transaksi <- renderbs4ValueBox({
    data <- load_data()
    if (nrow(data) == 0) {
      return(bs4ValueBox(
        value = "0",
        subtitle = "Total Transaksi",
        color = "info",
        icon = icon("receipt")
      ))
    }
    total_transaksi <- nrow(data)
    bs4ValueBox(
      value = formatC(total_transaksi, format = "d", big.mark = ","),
      subtitle = "Total Transaksi",
      color = "info",
      icon = icon("receipt")
    )
  })
  
  output$plot_penjualan <- renderHighchart({
    data <- load_data()
    if(nrow(data) == 0){
      return(highchart() %>% hc_title(text = "Tidak ada data"))
    }
    penjualan_harian <- data %>%
      group_by(Tanggal, Kategori_Produk) %>%
      summarise(Total_Penjualan = sum(as.numeric(Total), na.rm = TRUE), .groups = "drop")
    
    categories <- unique(penjualan_harian$Kategori_Produk)
    colors <- RColorBrewer::brewer.pal(min(length(categories), 8), "Set2")
    
    series_list <- lapply(categories, function(cat) {
      subset_data <- penjualan_harian %>% filter(Kategori_Produk == cat)
      list(
        name = cat,
        data = subset_data$Total_Penjualan,
        color = colors[match(cat, categories)]
      )
    })
    
    highchart() %>%
      hc_xAxis(categories = unique(penjualan_harian$Tanggal)) %>%
      hc_add_series_list(series_list) %>%
      hc_title(text = "Total Penjualan per Waktu per Kategori") %>%
      hc_credits(enabled = FALSE)
  })
  
  output$plot_produk_terlaris <- renderEcharts4r({
    data <- load_data()
    if(nrow(data)==0){
      return(e_charts() %>% e_title("Tidak ada data"))
    }
    produk_terlaris <- data %>%
      group_by(Kategori_Produk) %>%
      summarise(Terjual = sum(Kuantitas, na.rm = TRUE), .groups = "drop") %>%
      arrange(desc(Terjual)) %>%
      slice(1:5)
    
    produk_terlaris %>%
      e_charts(Kategori_Produk) %>%
      e_bar(Terjual, name = "Terjual") %>%
      e_title("Produk Terlaris") %>%
      e_tooltip(trigger = "axis") %>%
      e_legend(show = FALSE)
  })
  
  output$peta_penjualan <- renderLeaflet({
    data <- load_data()
    if(nrow(data) == 0){
      return(leaflet() %>% addTiles() %>% addControl("Tidak ada data", position = "topright"))
    }
    kota_penjualan <- data %>%
      group_by(Kota) %>%
      summarise(Total_Penjualan = sum(as.numeric(Total), na.rm = TRUE), .groups = "drop")
    
    kota_penjualan <- kota_penjualan %>% left_join(city_coords, by = "Kota")
    
    leaflet(kota_penjualan) %>%
      addProviderTiles(providers$OpenStreetMap) %>%
      addCircleMarkers(
        ~lon, ~lat,
        radius = ~ifelse(sqrt(Total_Penjualan)/10000 > 0, sqrt(Total_Penjualan)/10000, 1),
        color = theme_colors$primary,
        fillOpacity = 0.7,
        popup = ~paste("<b>Kota:</b>", Kota, "<br><b>Total Penjualan:</b>",
                       formatC(Total_Penjualan, format = "d", big.mark = ","))
      )
  })
  
  output$table_transaksi <- renderDT({
    data <- load_data()
    datatable(data, options = list(pageLength = 10, scrollX = TRUE))
  })
  
  output$pie_kategori <- renderEcharts4r({
    data <- load_data()
    if(nrow(data) == 0){
      return(e_charts() %>% e_title("Tidak ada data"))
    }
    kategori_data <- data %>%
      group_by(Kategori_Produk) %>%
      summarise(Penjualan = sum(as.numeric(Total), na.rm = TRUE), .groups = "drop")
    
    kategori_data %>%
      e_charts(Kategori_Produk) %>%
      e_pie(Penjualan, radius = c("50%", "70%")) %>%
      e_title("Distribusi Penjualan per Kategori") %>%
      e_tooltip(trigger = "item") %>%
      e_legend(orient = "vertical", left = "left")
  })
  
  output$bar_produk <- renderEcharts4r({
    data <- load_data()
    if(nrow(data) == 0){
      return(e_charts() %>% e_title("Tidak ada data"))
    }
    produk_data <- data %>%
      group_by(Kategori_Produk) %>%
      summarise(Penjualan = sum(as.numeric(Total), na.rm = TRUE), .groups = "drop") %>%
      arrange(desc(Penjualan)) %>%
      slice(1:10)
    
    produk_data %>%
      e_charts(Kategori_Produk) %>%
      e_bar(Penjualan, name = "Penjualan") %>%
      e_title("Top 10 Produk Berdasarkan Penjualan") %>%
      e_tooltip(trigger = "axis") %>%
      e_flip_coords() %>%
      e_legend(show = FALSE)
  })
  
  output$tren_produk <- renderHighchart({
    data <- load_data()
    if(nrow(data) == 0){
      return(highchart() %>% hc_title(text = "Tidak ada data"))
    }
    produk_tren <- data %>%
      group_by(Tanggal, Kategori_Produk) %>%
      summarise(Penjualan = sum(as.numeric(Total), na.rm = TRUE), .groups = "drop") %>%
      arrange(Tanggal)
    
    highchart() %>%
      hc_title(text = "Tren Penjualan Produk") %>%
      hc_xAxis(
        type = "datetime", 
        labels = list(format = '{value:%Y-%m-%d}')
      ) %>%
      hc_add_series_list(
        lapply(
          split(produk_tren, produk_tren$Kategori_Produk), 
          function(df) {
            list(
              name = unique(df$Kategori_Produk),
              data = list_parse2(df[, c("Tanggal", "Penjualan")])
            )
          }
        )
      ) %>%
      hc_tooltip(shared = TRUE) %>%
      hc_credits(enabled = FALSE)
  })
  
  # Segmentasi Pelanggan
  output$plot_demografi <- renderEcharts4r({
    data <- load_data()
    if(nrow(data) == 0){
      return(e_charts() %>% e_title("Tidak ada data"))
    }
    demografi_data <- data %>%
      group_by(Jenis_Kelamin) %>%
      summarise(Jumlah = n(), .groups = "drop")
    
    demografi_data %>%
      e_charts(Jenis_Kelamin) %>%
      e_pie(Jumlah, radius = "50%") %>%
      e_title("Demografi Pelanggan (Jenis Kelamin)") %>%
      e_tooltip(trigger = "item") %>%
      e_legend(orient = "vertical", left = "left")
  })
  
  output$plot_jenis_pelanggan <- renderEcharts4r({
    data <- load_data()
    if(nrow(data) == 0){
      return(e_charts() %>% e_title("Tidak ada data"))
    }
    jenis_data <- data %>%
      group_by(Jenis_Pelanggan) %>%
      summarise(Jumlah = n(), .groups = "drop")
    
    jenis_data %>%
      e_charts(Jenis_Pelanggan) %>%
      e_bar(Jumlah, name = "Jumlah") %>%
      e_title("Segmentasi Jenis Pelanggan") %>%
      e_tooltip(trigger = "axis") %>%
      e_legend(show = FALSE)
  })
  
  output$plot_tipe_pelanggan <- renderEcharts4r({
    data <- load_data()
    if(nrow(data) == 0){
      return(e_charts() %>% e_title("Tidak ada data"))
    }
    tipe_data <- data %>%
      group_by(Tipe_Pelanggan) %>%
      summarise(Jumlah = n(), .groups = "drop")
    
    tipe_data %>%
      e_charts(Tipe_Pelanggan) %>%
      e_bar(Jumlah, name = "Jumlah") %>%
      e_title("Segmentasi Tipe Pelanggan") %>%
      e_tooltip(trigger = "axis") %>%
      e_legend(show = FALSE)
  })
  
  output$plot_jenis_pembayaran <- renderEcharts4r({
    data <- load_data()
    if(nrow(data) == 0){
      return(e_charts() %>% e_title("Tidak ada data"))
    }
    bayar_data <- data %>%
      group_by(Pembayaran) %>%
      summarise(Jumlah = n(), .groups = "drop")
    
    bayar_data %>%
      e_charts(Pembayaran) %>%
      e_pie(Jumlah, radius = "50%") %>%
      e_title("Segmentasi Jenis Pembayaran") %>%
      e_tooltip(trigger = "item") %>%
      e_legend(orient = "vertical", left = "left")
  })
  
  output$rfm_analysis <- renderHighchart({
    data <- load_data()
    if(nrow(data) == 0){
      return(highchart() %>% hc_title(text = "Tidak ada data"))
    }
    now <- Sys.Date()
    rfm_data <- data %>%
      group_by(ID_Pelanggan) %>%
      summarise(
        Recency = as.numeric(difftime(now, as.Date(Tanggal), units = "days")),
        Frequency = n(),
        Monetary = sum(as.numeric(Total), na.rm = TRUE),
        .groups = "drop"
      )
    if(all(is.na(rfm_data$Recency))){
      rfm_data$Recency <- 0
    }
    highchart() %>%
      hc_add_series(data = rfm_data, type = "scatter",
                    hcaes(x = Recency, y = Frequency, size = Monetary)) %>%
      hc_title(text = "RFM Analysis") %>%
      hc_xAxis(title = list(text = "Recency (Hari)")) %>%
      hc_yAxis(title = list(text = "Frequency")) %>%
      hc_tooltip(pointFormat = "Recency: {point.x}<br>Frequency: {point.y}<br>Monetary: {point.Monetary}") %>%
      hc_credits(enabled = FALSE)
  })
  
  output$plot_omzet_cabang <- renderEcharts4r({
    data <- load_data()
    if(nrow(data) == 0){
      return(e_charts() %>% e_title("Tidak ada data"))
    }
    cabang_data <- data %>%
      group_by(ID_Cabang) %>%
      summarise(Omzet = sum(as.numeric(Total), na.rm = TRUE), .groups = "drop") %>%
      arrange(desc(Omzet))
    
    cabang_data %>%
      e_charts(ID_Cabang) %>%
      e_bar(Omzet, name = "Omzet") %>%
      e_title("Omzet per Cabang") %>%
      e_tooltip(trigger = "axis") %>%
      e_flip_coords() %>%
      e_legend(show = FALSE)
  })
  
  output$plot_cabang_performa <- renderEcharts4r({
    data <- load_data()
    if(nrow(data) == 0){
      return(e_charts() %>% e_title("Tidak ada data"))
    }
    cabang_performance <- data %>%
      group_by(ID_Cabang) %>%
      summarise(Omzet = sum(as.numeric(Total), na.rm = TRUE), .groups = "drop") %>%
      arrange(desc(Omzet))
    
    best_branch <- cabang_performance %>% slice(1)
    worst_branch <- cabang_performance %>% slice(n())
    
    combined <- rbind(best_branch, worst_branch)
    
    combined %>%
      e_charts(ID_Cabang) %>%
      e_bar(Omzet, name = "Omzet") %>%
      e_title("Cabang Terbaik & Terburuk") %>%
      e_tooltip(trigger = "axis") %>%
      e_flip_coords() %>%
      e_legend(show = FALSE)
  })
  
  output$map_cabang <- renderLeaflet({
    cabang_coords <- tbl_cabang %>% collect()
    cabang_map <- left_join(cabang_coords, city_coords, by = "Kota")
    
    leaflet(cabang_map) %>%
      addProviderTiles(providers$OpenStreetMap) %>%
      addMarkers(
        ~lon, ~lat,
        popup = ~paste0("<b>", ID_Cabang, "</b><br>Kota: ", Kota)
      )
  })
  
  observeEvent(input$update_password, {
    showModal(modalDialog(
      title = "Password Updated",
      "Password Anda telah berhasil diubah.",
      easyClose = TRUE,
      footer = NULL
    ))
  })
  
  observeEvent(input$save_preferences, {
    showNotification("Preferensi Anda telah disimpan.", type = "message")
  })
  
  observe({
    data <- load_data()
    total_penjualan <- sum(convert_total(data$Total), na.rm = TRUE)
    if(total_penjualan > 100000000){
      showNotification("Penjualan hari ini melebihi 100 juta!", type = "message")
    }
  })
  
  onStop(function() {
    dbDisconnect(con)
  })
}

secure_ui <- secure_app(ui)
shinyApp(secure_ui, server)


```
