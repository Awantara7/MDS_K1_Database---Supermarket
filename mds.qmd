---
title: "Database -Supermarket"
format: html
editor: visual
---

```{r}
library(shiny)
library(shinythemes)
library(shinyWidgets)
library(shinydashboard)
library(DBI)
library(RMariaDB)
library(dplyr)
library(dbplyr)
library(ggplot2)
library(plotly)
library(DT)
library(leaflet)
library(ggmap)
library(tidygeocoder)
```

```{r}
# Koneksi ke database 'Data' di MySQL (port 3307)
con <- dbConnect(RMariaDB::MariaDB(),
                 dbname = "data csv",  # Nama database yang sudah ada
                 host = "127.0.0.1",    
                 port = 3307,  # Pastikan port yang benar (3307)
                 user = "root",         
                 password = ""  # Sesuaikan jika ada password
)
```

```{r}
# Load tabel dari database
tbl_cabang <- tbl(con, "Cabang")
tbl_invoice <- tbl(con, "Invoice")
tbl_pelanggan <- tbl(con, "Pelanggan")
tbl_produk <- tbl(con, "Produk")
```

```{r}
print(tbl_cabang)
print(tbl_invoice)
print(tbl_pelanggan)
print(tbl_produk)
```

```{r}
library(shiny)
library(bs4Dash)
library(shinymanager)
library(shinyWidgets)
library(highcharter)
library(echarts4r)
library(DT)
library(leaflet)
library(dplyr)
library(DBI)
library(RMariaDB)
library(glue)
library(shinyjs)

# Server function
server <- function(input, output, session) {

  # Database Connection
  con <- dbConnect(RMariaDB::MariaDB(),
                   dbname = "data_csv",
                   host = "127.0.0.1",    
                   port = 3307,
                   user = "root",         
                   password = "")

  # Load tables
  tbl_cabang <- tbl(con, "Cabang")
  tbl_invoice <- tbl(con, "Invoice")
  tbl_pelanggan <- tbl(con, "Pelanggan")
  tbl_produk <- tbl(con, "Produk")  # Ensure this line is present

  # Rest of your server code
}

# Data kredensial untuk autentikasi
credentials <- data.frame(
  user = c("admin", "user1"),
  password = c("admin123", "user123"),
  stringsAsFactors = FALSE
)

# Tema warna
theme_colors <- list(
  primary = "#005BAC",
  secondary = "#FF6F00",
  accent = "#F5F5F5",
  bg_light = "#FFFFFF",
  text_dark = "#333333"
)

library(shiny)
library(bs4Dash)
library(shinymanager)
library(shinyWidgets)
library(highcharter)
library(echarts4r)
library(DT)
library(leaflet)
library(dplyr)
library(DBI)
library(RMariaDB)
library(glue)
library(shinyjs)

# UI
ui <- bs4DashPage(
  title = "WA-ONE SWALAYAN",
  
  header = bs4DashNavbar(
    skin = "light",
    status = "white",
    brand = bs4DashBrand(
      title = "WA-ONE SWALAYAN",
      color = "primary",
      href = "#"
    ),
    compact = FALSE
  ),
  
  sidebar = bs4DashSidebar(
    skin = "light",
    status = "primary",
    title = "Menu",
    brandColor = "primary",
    collapsed = FALSE,  # Sidebar not collapsed at start
    bs4SidebarMenu(
      bs4SidebarMenuItem("Dashboard Penjualan", tabName = "penjualan", icon = icon("chart-line")),
      bs4SidebarMenuItem("Produk & Kategori", tabName = "produk", icon = icon("box")),
      bs4SidebarMenuItem("Segmentasi Pelanggan", tabName = "pelanggan", icon = icon("users")),
      bs4SidebarMenuItem("Performa Cabang", tabName = "cabang", icon = icon("store")),
      bs4SidebarMenuItem("Pengaturan", tabName = "settings", icon = icon("cogs"))
    )
  ),
  
  body = bs4DashBody(
    useShinydashboard(),
    useShinyjs(),
    tags$head(
      tags$link(rel = "stylesheet", href = "https://fonts.googleapis.com/css?family=Roboto&display=swap"),
      tags$style(HTML("
        body {font-family: 'Roboto', sans-serif;}
        .main-header {background-color: #005BAC;}
        .main-sidebar {background-color: #FFFFFF;}
      "))
    ),
    bs4TabItems(
      # Dashboard Penjualan
      bs4TabItem(tabName = "penjualan",
                 fluidRow(
                   bs4ValueBoxOutput("total_penjualan", width = 3),
                   bs4ValueBoxOutput("performacabang", width = 3),
                   bs4ValueBoxOutput("produk_terjual", width = 3),
                   bs4ValueBoxOutput("total_transaksi", width = 3)
                 ),
                 fluidRow(
                   bs4Card(title = "Total Penjualan per Waktu", width = 8,
                           highchartOutput("plot_penjualan", height = "350px")),
                   bs4Card(title = "Produk Terlaris", width = 4,
                           echarts4rOutput("plot_produk_terlaris", height = "350px"))
                 ),
                 fluidRow(
                   bs4Card(title = "Peta Penjualan per Kota", width = 12,
                           leafletOutput("peta_penjualan", height = "400px"))
                 ),
                 fluidRow(
                   bs4Card(title = "Data Transaksi", width = 12,
                           DTOutput("table_transaksi"))
                 )
      ),
      
      # Produk & Kategori
      bs4TabItem(tabName = "produk",
                 fluidRow(
                   bs4Card(title = "Distribusi Penjualan per Kategori", width = 6,
                           echarts4rOutput("pie_kategori", height = "350px")),
                   bs4Card(title = "Perbandingan Penjualan Antar Produk", width = 6,
                           echarts4rOutput("bar_produk", height = "350px"))
                 ),
                 fluidRow(
                   bs4Card(title = "Tren Penjualan Produk", width = 12,
                           highchartOutput("tren_produk", height = "400px"))
                 )
      ),
      
      # Segmentasi Pelanggan
      bs4TabItem(tabName = "pelanggan",
                 fluidRow(
                   bs4Card(title = "Demografi Pelanggan", width = 6,
                           echarts4rOutput("plot_demografi", height = "350px")),
                   bs4Card(title = "Frekuensi Belanja", width = 6,
                           highchartOutput("plot_frekuensi_belanja", height = "350px"))
                 ),
                 fluidRow(
                   bs4Card(title = "RFM Analysis", width = 12,
                           highchartOutput("rfm_analysis", height = "400px"))
                 )
      ),
      
      # Performa Cabang
      bs4TabItem(tabName = "cabang",
                 fluidRow(
                   bs4Card(title = "Perbandingan Omzet Tiap Cabang", width = 6,
                           echarts4rOutput("plot_omzet_cabang", height = "350px")),
                   bs4Card(title = "Cabang Terbaik & Terburuk", width = 6,
                           echarts4rOutput("plot_cabang_performa", height = "350px"))
                 ),
                 fluidRow(
                   bs4Card(title = "Distribusi Cabang", width = 12,
                           leafletOutput("map_cabang", height = "400px"))
                 )
      ),
      
      # Pengaturan
      bs4TabItem(tabName = "settings",
                 h2("Pengaturan Aplikasi"),
                 fluidRow(
                   bs4Card(title = "Ubah Password", width = 6,
                           passwordInput("old_password", "Password Lama"),
                           passwordInput("new_password", "Password Baru"),
                           actionButton("update_password", "Update Password", class = "btn btn-primary")
                   ),
                   bs4Card(title = "Preferensi", width = 6,
                           checkboxInput("dark_mode", "Mode Gelap"),
                           checkboxInput("notif_email", "Terima Notifikasi via Email"),
                           actionButton("save_preferences", "Simpan Preferensi", class = "btn btn-success")
                   )
                 )
      )
    )
  ),
  
  controlbar = bs4DashControlbar(
    skin = "light",
    title = "Filter Data",
    collapsed = TRUE,
    dateRangeInput("dateRange", "Pilih Rentang Waktu", 
                   start = Sys.Date() - 30, end = Sys.Date(),
                   format = "yyyy-mm-dd", separator = " hingga ",
                   startview = "year", language = "id"),
    pickerInput("select_produk", "Pilih Produk:", choices = NULL, multiple = TRUE),
    actionButton("apply_filters", "Terapkan Filter")
  ),
  
  footer = bs4DashFooter(
    left = "WA-ONE SWALAYAN Â© 2023",
    right = "Powered by R & Shiny"
  )
)


# Server
server <- function(input, output, session) {
  
  # Autentikasi pengguna
  res_auth <- secure_server(
    check_credentials = check_credentials(credentials)
  )
  output$res_auth <- renderPrint({
    reactiveValuesToList(res_auth)
  })
  
  # Update pilihan produk
  observe({
    produk_list <- tbl_produk %>% select(ID_Produk) %>% collect() %>% pull()
    updatePickerInput(session, "select_produk", choices = produk_list)
  })
  
  # Reactive data loading
  load_data <- reactive({
    req(input$apply_filters)
    isolate({
      start_date <- as.character(input$dateRange[1])
      end_date <- as.character(input$dateRange[2])
      
      # Filter data menggunakan local()
      invoice_data <- tbl_invoice %>%
        filter(
          Tanggal >= local(start_date),
          Tanggal <= local(end_date)
        ) %>%
        collect()
      
      # Join dengan tabel lain
      data <- invoice_data %>%
        left_join(tbl_pelanggan %>% collect(), by = "ID_Pelanggan") %>%
        left_join(tbl_produk %>% collect(), by = "ID_Produk") %>%
        left_join(tbl_cabang %>% collect(), by = "ID_Cabang")
      
      # Filter berdasarkan produk jika dipilih
      if (!is.null(input$select_produk) && length(input$select_produk) > 0) {
        data <- data %>% filter(ID_Produk %in% input$select_produk)
      }
      data
    })
  })
  
  # Total Penjualan
  output$total_penjualan <- renderbs4ValueBox({
    data <- load_data()
    total_penjualan <- sum(data$Total, na.rm = TRUE)
    bs4ValueBox(
      value = paste0("Rp ", formatC(total_penjualan, format = "d", big.mark = ",")),
      subtitle = "Total Penjualan",
      status = "primary",
      icon = icon("credit-card")
    )
  })
  
  # Performa Cabang
  output$performacabang <- renderbs4ValueBox({
    data <- load_data()
    cabang_performance <- data %>%
      group_by(Nama_Cabang) %>%
      summarise(Total_Cabang = sum(Total, na.rm = TRUE)) %>%
      arrange(desc(Total_Cabang)) %>%
      slice(1)
    bs4ValueBox(
      value = cabang_performance$Nama_Cabang,
      subtitle = "Cabang Terbaik",
      status = "success",
      icon = icon("store")
    )
  })
  
  # Produk Terjual
  output$produk_terjual <- renderbs4ValueBox({
    data <- load_data()
    total_produk_terjual <- sum(data$Jumlah, na.rm = TRUE)
    bs4ValueBox(
      value = formatC(total_produk_terjual, format = "d", big.mark = ","),
      subtitle = "Produk Terjual",
      status = "warning",
      icon = icon("shopping-cart")
    )
  })
  
  # Total Transaksi
  output$total_transaksi <- renderbs4ValueBox({
    data <- load_data()
    total_transaksi <- nrow(data)
    bs4ValueBox(
      value = formatC(total_transaksi, format = "d", big.mark = ","),
      subtitle = "Total Transaksi",
      status = "info",
      icon = icon("receipt")
    )
  })
  
  # Visualisasi Penjualan per Waktu
  output$plot_penjualan <- renderHighchart({
    data <- load_data()
    penjualan_harian <- data %>%
      group_by(Tanggal) %>%
      summarise(Total_Penjualan = sum(Total, na.rm = TRUE))
    
    highchart() %>%
      hc_xAxis(categories = penjualan_harian$Tanggal) %>%
      hc_add_series(name = "Penjualan", data = penjualan_harian$Total_Penjualan, type = "line") %>%
      hc_title(text = "Total Penjualan per Hari") %>%
      hc_credits(enabled = FALSE)
  })
  
  # Visualisasi Produk Terlaris
  output$plot_produk_terlaris <- renderEcharts4r({
    data <- load_data()
    produk_terlaris <- data %>%
      group_by(ID_Produk) %>%
      summarise(Terjual = sum(Jumlah, na.rm = TRUE)) %>%
      arrange(desc(Terjual)) %>%
      slice(1:5)
    
    produk_terlaris %>%
      e_charts(ID_Produk) %>%
      e_bar(Terjual, name = "Terjual") %>%
      e_title("Produk Terlaris") %>%
      e_tooltip(trigger = "axis") %>%
      e_legend(show = FALSE)
  })
  
  # Peta Penjualan per Kota
  output$peta_penjualan <- renderLeaflet({
    data <- load_data()
    kota_penjualan <- data %>%
      group_by(Kota) %>%
      summarise(Total_Penjualan = sum(Total, na.rm = TRUE)) %>%
      left_join(tbl_cabang %>% select(Kota, lat, lon) %>% collect(), by = "Kota")
    
    leaflet(kota_penjualan) %>%
      addProviderTiles(providers$OpenStreetMap) %>%
      addCircleMarkers(
        ~lon, ~lat,
        radius = ~sqrt(Total_Penjualan)/10000,
        color = theme_colors$primary,
        fillOpacity = 0.7,
        popup = ~paste("<b>Kota:</b>", Kota, "<br><b>Total Penjualan:</b>", formatC(Total_Penjualan, format = "d", big.mark = ","))
      )
  })
  
  # Data Transaksi
  output$table_transaksi <- renderDT({
    data <- load_data()
    datatable(data, options = list(pageLength = 10, scrollX = TRUE))
  })
  
  # Visualisasi Distribusi Kategori
  output$pie_kategori <- renderEcharts4r({
    data <- load_data()
    kategori_data <- data %>%
      group_by(Kategori) %>%
      summarise(Penjualan = sum(Total, na.rm = TRUE))
    
    kategori_data %>%
      e_charts(Kategori) %>%
      e_pie(Penjualan, radius = c("50%", "70%")) %>%
      e_title("Distribusi Penjualan per Kategori") %>%
      e_tooltip(trigger = "item") %>%
      e_legend(orient = "vertical", left = "left")
  })
  
  # Visualisasi Perbandingan Penjualan Antar Produk
  output$bar_produk <- renderEcharts4r({
    data <- load_data()
    produk_data <- data %>%
      group_by(ID_Produk) %>%
      summarise(Penjualan = sum(Total, na.rm = TRUE)) %>%
      arrange(desc(Penjualan)) %>%
      slice(1:10)
    
    produk_data %>%
      e_charts(ID_Produk) %>%
      e_bar(Penjualan, name = "Penjualan") %>%
      e_title("Top 10 Produk Berdasarkan Penjualan") %>%
      e_tooltip(trigger = "axis") %>%
      e_flip_coords() %>%
      e_legend(show = FALSE)
  })
  
  # Visualisasi Tren Penjualan Produk
  output$tren_produk <- renderHighchart({
    data <- load_data()
    produk_tren <- data %>%
      group_by(Tanggal, ID_Produk) %>%
      summarise(Penjualan = sum(Total, na.rm = TRUE)) %>%
      arrange(Tanggal)
    
    highchart() %>%
      hc_title(text = "Tren Penjualan Produk") %>%
      hc_xAxis(type = "datetime", labels = list(format = '{value:%Y-%m-%d}')) %>%
      hc_add_series_list(
        lapply(split(produk_tren, produk_tren$ID_Produk), function(df) {
          list(
            name = unique(df$ID_Produk),
            data = list_parse2(df[, c("Tanggal", "Penjualan")])
          )
        })
      ) %>%
      hc_tooltip(shared = TRUE) %>%
      hc_credits(enabled = FALSE)
  })
  
  # Visualisasi Demografi Pelanggan
  output$plot_demografi <- renderEcharts4r({
    data <- load_data()
    demografi_data <- data %>%
      group_by(Gender) %>%
      summarise(Jumlah = n())
    
    demografi_data %>%
      e_charts(Gender) %>%
      e_pie(Jumlah, radius = "50%") %>%
      e_title("Demografi Pelanggan") %>%
      e_tooltip(trigger = "item") %>%
      e_legend(orient = "vertical", left = "left")
  })
  
  # Visualisasi Frekuensi Belanja
  output$plot_frekuensi_belanja <- renderHighchart({
    data <- load_data()
    frekuensi_belanja <- data %>%
      group_by(ID_Pelanggan) %>%
      summarise(Frekuensi = n()) %>%
      group_by(Frekuensi) %>%
      summarise(Jumlah_Pelanggan = n())
    
    highchart() %>%
      hc_chart(type = "column") %>%
      hc_title(text = "Frekuensi Belanja Pelanggan") %>%
      hc_xAxis(categories = as.character(frekuensi_belanja$Frekuensi)) %>%
      hc_add_series(name = "Jumlah Pelanggan", data = frekuensi_belanja$Jumlah_Pelanggan) %>%
      hc_credits(enabled = FALSE)
  })
  
  # Visualisasi RFM Analysis
  output$rfm_analysis <- renderHighchart({
    data <- load_data()
    now <- Sys.Date()
    rfm_data <- data %>%
      group_by(ID_Pelanggan) %>%
      summarise(
        Recency = as.numeric(difftime(now, max(Tanggal), units = "days")),
        Frequency = n(),
        Monetary = sum(Total, na.rm = TRUE)
      )
    
    highchart() %>%
      hc_add_series(data = rfm_data, type = "scatter",
                    hcaes(x = Recency, y = Frequency, size = Monetary)) %>%
      hc_title(text = "RFM Analysis") %>%
      hc_xAxis(title = list(text = "Recency (Hari)")) %>%
      hc_yAxis(title = list(text = "Frequency")) %>%
      hc_tooltip(pointFormat = "Recency: {point.x}<br>Frequency: {point.y}<br>Monetary: {point.Monetary}") %>%
      hc_credits(enabled = FALSE)
  })
  
  # Visualisasi Omzet Cabang
  output$plot_omzet_cabang <- renderEcharts4r({
    data <- load_data()
    cabang_data <- data %>%
      group_by(Nama_Cabang) %>%
      summarise(Omzet = sum(Total, na.rm = TRUE)) %>%
      arrange(desc(Omzet))
    
    cabang_data %>%
      e_charts(Nama_Cabang) %>%
      e_bar(Omzet, name = "Omzet") %>%
      e_title("Omzet per Cabang") %>%
      e_tooltip(trigger = "axis") %>%
      e_flip_coords() %>%
      e_legend(show = FALSE)
  })
  
  # Visualisasi Cabang Terbaik & Terburuk
  output$plot_cabang_performa <- renderEcharts4r({
    data <- load_data()
    cabang_performance <- data %>%
      group_by(Nama_Cabang) %>%
      summarise(Omzet = sum(Total, na.rm = TRUE)) %>%
      arrange(desc(Omzet))
    
    best_branch <- cabang_performance %>% slice(1)
    worst_branch <- cabang_performance %>% slice(n())
    
    combined <- rbind(best_branch, worst_branch)
    
    combined %>%
      e_charts(Nama_Cabang) %>%
      e_bar(Omzet, name = "Omzet") %>%
      e_title("Cabang Terbaik & Terburuk") %>%
      e_tooltip(trigger = "axis") %>%
      e_flip_coords() %>%
      e_legend(show = FALSE)
  })
  
  # Peta Distribusi Cabang
  output$map_cabang <- renderLeaflet({
    cabang_coords <- tbl_cabang %>% collect()
    
    leaflet(cabang_coords) %>%
      addProviderTiles(providers$OpenStreetMap) %>%
      addMarkers(
        ~lon, ~lat,
        popup = ~paste0("<b>", Nama_Cabang, "</b><br>Alamat: ", Alamat)
      )
  })
  
  # Handle aksi pada tab Pengaturan
  observeEvent(input$update_password, {
    showModal(modalDialog(
      title = "Password Updated",
      "Password Anda telah berhasil diubah.",
      easyClose = TRUE,
      footer = NULL
    ))
  })
  
  observeEvent(input$save_preferences, {
    showNotification("Preferensi Anda telah disimpan.", type = "message")
  })
  
  # Notifikasi jika total penjualan melebihi angka tertentu
  observe({
    data <- load_data()
    total_penjualan <- sum(data$Total, na.rm = TRUE)
    if(total_penjualan > 100000000){
      showNotification("Penjualan hari ini melebihi 100 juta!", type = "message")
    }
  })
}

# Secure UI
secure_ui <- secure_app(ui)

# Jalankan Aplikasi
shinyApp(secure_ui, server)
```
