library(shiny)
library(shinythemes)
install.packages("shiny")
library(shiny)
library(shinythemes)
library(shiny)
library(shinythemes)
installed.packages("shinythemes")
library(shiny)
library(shinythemes)
library(shiny)
library(shinythemes)
install.packages("shinythemes")
library(shiny)
library(shinythemes)
library(shinyWidgets)
install.packages("shinyWidgets")
library(shiny)
library(shinythemes)
library(shinyWidgets)
library(DBI)
library(RMariaDB)
install.packages("RmariaDB")
y
yes
install.packages("RMariaDB")
library(shiny)
library(shinythemes)
library(shinyWidgets)
library(DBI)
library(RMariaDB)
library(dplyr)
library(dbplyr)
library(ggplot2)
library(plotly)
library(DT)
install.packages("DT")
library(shiny)
library(shinythemes)
library(shinyWidgets)
library(DBI)
library(RMariaDB)
library(dplyr)
library(dbplyr)
library(ggplot2)
library(plotly)
library(DT)
# Koneksi ke database
con <- dbConnect(RMariaDB::MariaDB(),
dbname = "Latihan",
host = "127.0.0.1",
port = 3306,
user = "root",
password = ""
)
library(shiny)
library(shinythemes)
library(shinyWidgets)
library(DBI)
library(RMariaDB)
library(dplyr)
library(dbplyr)
library(ggplot2)
library(plotly)
library(DT)
# Koneksi ke database
con <- dbConnect(RMariaDB::MariaDB(),
dbname = "Prak MDS",
host = "127.0.0.1",
port = 3307,
user = "root",
password = ""
)
library(shiny)
library(shinythemes)
library(shinyWidgets)
library(DBI)
library(RMariaDB)
library(dplyr)
library(dbplyr)
library(ggplot2)
library(plotly)
library(DT)
# Koneksi ke database
con <- dbConnect(RMariaDB::MariaDB(),
dbname = "Prak MDS",
host = "127.0.0.1",
port = 3307,
user = "root",
password = ""
)
library(shiny)
library(shinythemes)
library(shinyWidgets)
library(DBI)
library(RMariaDB)
library(dplyr)
library(dbplyr)
library(ggplot2)
library(plotly)
library(DT)
# Koneksi ke database
con <- dbConnect(RMariaDB::MariaDB(),
dbname = "Prak MDS",
host = "127.0.0.1",
port = 3307,
user = "root",
)
library(shiny)
library(shinythemes)
library(shinyWidgets)
library(DBI)
library(RMariaDB)
library(dplyr)
library(dbplyr)
library(ggplot2)
library(plotly)
library(DT)
# Koneksi ke database
con <- dbConnect(RMariaDB::MariaDB(),
dbname = "Latihan",
host = "127.0.0.1",
port = 3306,
user = "root",
password = ""
)
# Koneksi ke database
con <- dbConnect(RMariaDB::MariaDB(),
dbname = "Prak MDS",
host = "127.0.0.1",
port = 3307,
user = "root",
password = ""
)
# Koneksi ke database
con <- dbConnect(RMariaDB::MariaDB(),
dbname = "Prak MDS",
host = "127.0.0.1",
port = 3307,
user = "root",
password = ""
)
# Koneksi ke database
con <- dbConnect(RMariaDB::MariaDB(),
dbname = "Prak MDS",
host = "127.0.0.1",
port = 3307,
user = "root",
password = ""
)
# Koneksi ke database
con <- dbConnect(RMariaDB::MariaDB(),
dbname = "Prak MDS",
host = "127.0.0.1",
port = 3308,
user = "root",
password = ""
)
# Koneksi ke database
con <- dbConnect(RMariaDB::MariaDB(),
dbname = "Prak MDS",
host = "127.0.0.1",
port = 3308,
user = "root",
password = ""
)
# Koneksi ke database
con <- dbConnect(RMariaDB::MariaDB(),
dbname = "Prak MDS",
host = "127.0.0.1",
port = 3308,
user = "root",
password = ""
)
# Koneksi ke database
con <- dbConnect(RMariaDB::MariaDB(),
dbname = "Prak MDS",
host = "127.0.0.1",
port = 3308,
user = "root",
password = ""
)
# Koneksi ke database
con <- dbConnect(RMariaDB::MariaDB(),
dbname = "MDS Database",
host = "127.0.0.1",
port = 3309,
user = "root",
password = ""
)
# Koneksi ke database
con <- dbConnect(RMariaDB::MariaDB(),
dbname = "MDS Database",
host = "127.0.0.1",
port = 3309,
user = "root",
password = ""
)
library(shiny)
library(shinythemes)
library(shinyWidgets)
library(DBI)
library(RMariaDB)
library(dplyr)
library(dbplyr)
library(ggplot2)
library(plotly)
library(DT)
# Koneksi ke database
con <- dbConnect(RMariaDB::MariaDB(),
dbname = "MDS Database",
host = "127.0.0.1",
port = 3309,
user = "root",
password = ""
)
# Koneksi ke database
con <- dbConnect(RMariaDB::MariaDB(),
dbname = "MDS Database",
host = "127.0.0.1",
port = 3309,
user = "root",
password = ""
)
#Load Library
library(readxl)
library(tidyverse)
library(ggplot2)
library(reshape2)
library(RColorBrewer)
#Load Dataaset
test_data <- read_excel("C:/Users/ASUS ROG/Downloads/Problem 2-20250119T221602Z-001/Problem 2/test.xlsx")
train_data <- read_excel("C:/Users/ASUS ROG/Downloads/Problem 2-20250119T221602Z-001/Problem 2/train.xlsx")
# struktur data
glimpse(train_data)
# Mengecek missing values
missing_values <- train_data %>% summarise_all(~sum(is.na(.))) %>% gather(key = "variable", value = "missing_count")
print(missing_values)
# Perbandingan Harga Berdasarkan Foto Profil dan Verifikasi Identitas Host
train_data_long <- train_data %>%
select(price, host_has_profile_pic, host_identity_verified) %>%
gather(key = "host_feature", value = "feature_value", host_has_profile_pic, host_identity_verified)
ggplot(train_data_long, aes(x = feature_value, y = price, fill = feature_value)) +
geom_boxplot() +
facet_wrap(~host_feature, scales = "free_y") +  # Memisahkan boxplot berdasarkan fitur
labs(title = "Perbandingan Harga Berdasarkan Foto Profil dan Verifikasi Identitas Host",
x = "Fitur Host (Foto Profil / Verifikasi Identitas)",
y = "Harga ($)") +
scale_fill_manual(values = c("lightblue", "lightgreen", "lightcoral")) +  # Warna untuk kategori True/False
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Rotasi teks sumbu X
# Distribusi Harga Berdasarkan PanjanG Deskripsi
train_data$description_length <- nchar(as.character(train_data$description))
train_data$description_length_category <- cut(train_data$description_length,
breaks = c(0, 100, 200, 300, 500, Inf),
labels = c("Pendek", "Sedang", "Panjang", "Sangat Panjang", "Ekstrem"))
ggplot(train_data, aes(x = description_length_category, y = price, fill = description_length_category)) +
geom_violin(alpha = 0.7) +  # Violin plot dengan transparansi
scale_fill_brewer(palette = "Set3") +  # Palet warna
labs(title = "Distribusi Harga Berdasarkan Kategori Panjang Deskripsi",
x = "Kategori Panjang Deskripsi",
y = "Harga ($)") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Rotasi teks X
git push origin main
Workspace loaded from ~/MDS-K2-Database Supermarket/.RData
library(shiny)
library(shinythemes)
library(shinyWidgets)
library(shinydashboard)
library(DBI)
library(RMariaDB)
library(dplyr)
library(dbplyr)
library(ggplot2)
library(plotly)
library(DT)
library(leaflet)
library(ggmap)
library(tidygeocoder)
cd Project/Website
cd
# Koneksi ke database 'Data' di MySQL (port 3307)
con <- dbConnect(RMariaDB::MariaDB(),
dbname = "data csv",  # Nama database yang sudah ada
host = "127.0.0.1",
port = 3307,  # Pastikan port yang benar (3307)
user = "root",
password = ""  # Sesuaikan jika ada password
)
# Koneksi ke database 'Data' di MySQL (port 3307)
con <- dbConnect(RMariaDB::MariaDB(),
dbname = "data csv",  # Nama database yang sudah ada
host = "127.0.0.1",
port = 3307,  # Pastikan port yang benar (3307)
user = "root",
password = ""  # Sesuaikan jika ada password
)
# Load tabel dari database
tbl_cabang <- tbl(con, "Cabang")
tbl_invoice <- tbl(con, "Invoice")
tbl_pelanggan <- tbl(con, "Pelanggan")
tbl_produk <- tbl(con, "Produk")
print(tbl_cabang)
print(tbl_invoice)
print(tbl_pelanggan)
print(tbl_produk)
# UI Dashboard
ui <- dashboardPage(
skin = "blue",
dashboardHeader(
title = "ðŸ“Š Supermarket XXX",
titleWidth = 300
),
dashboardSidebar(
sidebarMenu(
menuItem("Dashboard Utama", tabName = "main_dashboard", icon = icon("dashboard")),
menuItem("Cabang", tabName = "penjualan", icon = icon("industry")),
menuItem("Produk", tabName = "produk", icon = icon("gift")),
menuItem("Pelanggan", tabName = "pelanggan", icon = icon("users"))
)
),
dashboardBody(
tags$style(
HTML("
.value-box {
height: 200px; /* Mengatur tinggi box */
overflow-y: scroll; /* Menambahkan scroll jika konten terlalu panjang */
}
")
),
tabItems(
# Main Dashboard Tab
tabItem(tabName = "main_dashboard",
fluidRow(
column(4, valueBoxOutput("total_penjualan")),
column(4, valueBoxOutput("total_transaksi")),
column(4, valueBoxOutput("total_jenis_produk"))
),
fluidRow(
leafletOutput("map", height = "400px")
)
),
# Penjualan per Cabang Tab
tabItem(tabName = "penjualan",
fluidRow(
column(6, DTOutput("penjualan_table")),
column(6, plotlyOutput("penjualan_chart_detail"))
)
),
# Produk Terlaris Tab
tabItem(tabName = "produk",
fluidRow(
column(6, DTOutput("produk_table")),
column(6, plotlyOutput("produk_chart"))
)
),
# Pelanggan Tab
tabItem(tabName = "pelanggan",
fluidRow(
column(6, plotlyOutput("gender_chart")),
column(6, plotlyOutput("pelanggan_chart"))
)
)
)
)
)
# Server
server <- function(input, output, session) {
# Load Data & Refresh
load_data <- reactive({
invalidateLater(30000, session) # Refresh data every 30 seconds
data <- tbl_invoice %>% collect()      # Ambil data dari tabel invoice
data$Tanggal <- as.Date(data$Tanggal, format = "%m/%d/%Y")  # Memastikan format tanggal yang benar
return(data)
})
# Total Penjualan
output$total_penjualan <- renderValueBox({
data <- load_data()
total_penjualan <- sum(data$Total, na.rm = TRUE)  # Memastikan tidak ada NA yang mempengaruhi hasil
valueBox(
formatC(total_penjualan, format = "d", big.mark = ","),
"Total Penjualan",
icon = icon("credit-card"),
color = "aqua"
)
})
# Total Jumlah Transaksi
output$total_transaksi <- renderValueBox({
data <- load_data()
total_transaksi <- nrow(data)  # Menghitung jumlah transaksi
valueBox(
formatC(total_transaksi, format = "d", big.mark = ","),
"Total Jumlah Transaksi",
icon = icon("exchange-alt"),
color = "yellow"
)
})
# Total Jenis Produk
output$total_jenis_produk <- renderValueBox({
data <- tbl_produk %>% collect()  # Mengambil data produk
total_jenis_produk <- n_distinct(data$Kategori_Produk)  # Menghitung jumlah kategori produk unik
# Menambahkan daftar jenis produk dalam valueBox
produk_jenis <- c(
"Health and beauty",
"Electronic accessories",
"Home and lifestyle",
"Sports and travel",
"Food and beverages",
"Fashion accessories"
)
# Menampilkan hasil dalam valueBox dengan HTML() dan pemformatan yang lebih rapi
valueBox(
formatC(total_jenis_produk, format = "d", big.mark = ","),
HTML(paste("Total Jenis Produk", "<br>", paste(produk_jenis, collapse = "<br>"))),  # Menggunakan HTML() untuk menampilkan daftar jenis produk
icon = icon("box"),
color = "green"
)
})
# Peta Lokasi Cabang (Koordinat)
cabang_data <- data.frame(
ID_Cabang = c("B0001", "B0002", "B0003"),
Kota = c("Naypyidaw", "Yangon", "Mandalay"),
lat = c(19.752162400254907, 16.86873053516028, 21.93920096942228),
lon = c(96.09634335734853, 96.14006796301643, 96.08698353742243)
)
output$map <- renderLeaflet({
leaflet(cabang_data) %>%
addTiles() %>%  # Menambahkan layer peta dasar
addProviderTiles(providers$CartoDB.Positron) %>%  # Menambahkan layer CartoDB untuk peta lebih jelas
addMarkers(~lon, ~lat, popup = ~paste("Cabang: ", Kota))  # Menambahkan marker dengan popup nama kota
})
}
# Jalankan Aplikasi
shinyApp(ui, server)
